name: React Vite Deployment

on:
    push:
        branches: ["main", "feat/cicd*"]

jobs: 
    prepare:
        runs-on: topdev
        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Setup node version
              uses: actions/setup-node@v3
              with:
                  node-version: 20.13.1

            - name: install dependencies
              run: |
                  npm install --legacy-peer-deps

            - name: Build project
              run: |
                  igs-vault write /stag/data/${{ github.event.repository.name }} .env
                  igs-vault append /global/data/stag/windows .env
                  npm run build

            - name: Clean project
              run: |
                  npx rimraf ./node_modules
                  npm install --production --legacy-peer-deps

    deploy:
        runs-on: topdev
        needs: prepare
        env:
            appName: ${{ github.event.repository.name }}

        steps:
            - name: Set destination path
              run: |
                  $destination = "E:\Deploy\Pm2\${{ github.event.repository.name }}"
                  mkdir -Force $destination | Out-Null
                  echo "destination=$destination" >> $env:GITHUB_ENV

            - name: Stop application
              run: |
                  pm2 stop ${{env.appName}} 2>$null || echo "App not running or already stopped"

            - name: Create directories and copy files
              run: |
                  mkdir -Force "$env:destination\dist"
                  Copy-Item -Path ".\dist\*" -Destination "$env:destination\dist\" -Recurse -Force
                  Copy-Item -Path ".\package.json" -Destination "$env:destination\" -Force
                  if (Test-Path ".env") {
                      Copy-Item -Path ".env" -Destination "$env:destination\" -Force
                  }

            - name: Install serve globally
              run: npm install -g serve

            - name: Create PM2 ecosystem file
              run: |
                  $ecosystemContent = @"
                  module.exports = {
                    apps: [{
                      name: '${{env.appName}}',
                      script: 'serve',
                      args: '-s dist -l ' + (process.env.PORT || 3000),
                      cwd: '$env:destination',
                      instances: 1,
                      autorestart: true,
                      watch: false,
                      max_memory_restart: '1G',
                      env: {
                        NODE_ENV: 'production'
                      }
                    }]
                  };
                  "@
                  $ecosystemContent | Out-File -FilePath "$env:destination\ecosystem.config.js" -Encoding UTF8

            - name: Start application with PM2
              run: |
                  cd "$env:destination"
                  pm2 start ecosystem.config.js

            - name: Save Pm2
              run: |
                  pm2 save --force

    alert:
        runs-on: topdev
        needs: deploy
        steps:
            - name: Notify via Telegram Success
              if: success()
              run: |
                  Invoke-RestMethod -Uri "http://192.168.55.38:51104/api/telegram/sendMessage" `
                  -Method POST `
                  -Headers @{ "Content-Type" = "application/json" } `
                  -Body '{"message": "${{github.repository}} - ${{github.workflow}} - Success"}'

            - name: Notify via Telegram Failure
              if: failure()
              run: |
                  Invoke-RestMethod -Uri "http://192.168.55.38:51104/api/telegram/sendMessage" `
                  -Method POST `
                  -Headers @{ "Content-Type" = "application/json" } `
                  -Body '{"message": "${{github.repository}} - ${{github.workflow}} - Failure"}'